package com.example.myapplication

import android.app.DatePickerDialog
import android.content.ContentValues
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.os.Bundle
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {

    private lateinit var customerNameInput: EditText
    private lateinit var selectDateButton: Button
    private lateinit var selectedDateText: TextView
    private lateinit var ratingBar: RatingBar
    private lateinit var saveButton: Button
    private lateinit var listView: ListView

    private lateinit var adapter: ArrayAdapter<String>
    private lateinit var database: SQLiteDatabase
    private var selectedDate: String = "No date selected"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        customerNameInput = findViewById(R.id.customerNameInput)
        selectDateButton = findViewById(R.id.selectDateButton)
        selectedDateText = findViewById(R.id.selectedDateText)
        ratingBar = findViewById(R.id.ratingBar)
        saveButton = findViewById(R.id.saveButton)
        listView = findViewById(R.id.listView)

        adapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, ArrayList())
        listView.adapter = adapter

        // Initialize Database
        val dbHelper = object : SQLiteOpenHelper(this, "CustomerDB", null, 1) {
            override fun onCreate(db: SQLiteDatabase) {
                db.execSQL("""
                    CREATE TABLE customers (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        purchase_date TEXT,
                        rating REAL
                    )
                """.trimIndent())
            }

            override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
                db.execSQL("DROP TABLE IF EXISTS customers")
                onCreate(db)
            }
        }

        database = dbHelper.writableDatabase

        selectDateButton.setOnClickListener { showDatePicker() }
        saveButton.setOnClickListener { saveCustomerDetails() }

        loadCustomers()
    }

    private fun showDatePicker() {
        val calendar = Calendar.getInstance()
        val year = calendar.get(Calendar.YEAR)
        val month = calendar.get(Calendar.MONTH)
        val day = calendar.get(Calendar.DAY_OF_MONTH)

        val datePickerDialog = DatePickerDialog(this, { _, selectedYear, selectedMonth, selectedDay ->
            val sdf = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
            selectedDate = sdf.format(Date(selectedYear - 1900, selectedMonth, selectedDay))
            selectedDateText.text = selectedDate
        }, year, month, day)

        datePickerDialog.show()
    }

    private fun saveCustomerDetails() {
        val name = customerNameInput.text.toString().trim()
        val rating = ratingBar.rating

        if (name.isEmpty() || selectedDate == "No date selected") {
            Toast.makeText(this, "Please enter all details!", Toast.LENGTH_SHORT).show()
            return
        }

        val values = ContentValues()
        values.put("name", name)
        values.put("purchase_date", selectedDate)
        values.put("rating", rating)

        val result = database.insert("customers", null, values)

        if (result != -1L) {
            Toast.makeText(this, "Customer Added!", Toast.LENGTH_SHORT).show()
            loadCustomers()
        } else {
            Toast.makeText(this, "Error adding customer!", Toast.LENGTH_SHORT).show()
        }

        customerNameInput.text.clear()
        selectedDateText.text = "No date selected"
        selectedDate = "No date selected"
        ratingBar.rating = 0f
    }

    private fun loadCustomers() {
        val cursor = database.rawQuery("SELECT * FROM customers", null)
        val customerList = mutableListOf<String>()

        while (cursor.moveToNext()) {
            val name = cursor.getString(cursor.getColumnIndexOrThrow("name"))
            val date = cursor.getString(cursor.getColumnIndexOrThrow("purchase_date"))
            val rating = cursor.getFloat(cursor.getColumnIndexOrThrow("rating"))
            customerList.add("Name: $name\nPurchase Date: $date\nRating: $rating â˜…")
        }

        cursor.close()
        adapter.clear()
        adapter.addAll(customerList)
        adapter.notifyDataSetChanged()
    }
}